// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestHandlerJson = void 0;
const teams_manifest_1 = require("@microsoft/teams-manifest");
const uuid_1 = require("uuid");
const manifestInfo_1 = require("../manifestInfo");
const manifestHandler_1 = require("./manifestHandler");
class ManifestHandlerJson extends manifestHandler_1.ManifestHandler {
    /* eslint-disable @typescript-eslint/no-unused-vars */
    modifyManifest(guid, displayName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const teamsAppManifest = yield teams_manifest_1.ManifestUtil.loadFromPath(this.manifestPath);
                if (typeof guid !== "undefined") {
                    if (!guid || guid === "random") {
                        guid = (0, uuid_1.v4)();
                    }
                    teamsAppManifest.id = guid;
                }
                if (typeof displayName !== "undefined") {
                    teamsAppManifest.name.short = displayName;
                }
                return teamsAppManifest;
            }
            catch (err) {
                throw new Error(`Unable to modify json data for manifest file: ${this.manifestPath}. \n${err}`);
            }
        });
    }
    parseManifest() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const file = yield teams_manifest_1.ManifestUtil.loadFromPath(this.manifestPath);
                return this.getManifestInfo(file);
            }
            catch (err) {
                throw new Error(`Unable to read data for manifest file: ${this.manifestPath}. \n${err}`);
            }
        });
    }
    // TODO: change teamsAppManifest type to TeamsAppManifest
    getManifestInfo(teamsAppManifest) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const manifestInfo = new manifestInfo_1.ManifestInfo();
        // Need to handle mutliple version of the prerelease json manifest schema
        const extensionElement = (teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.extensions)
            ? teamsAppManifest.extensions[0]
            : teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.extension;
        manifestInfo.id = teamsAppManifest.id;
        manifestInfo.appDomains = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.validDomains;
        manifestInfo.defaultLocale = (_a = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.localizationInfo) === null || _a === void 0 ? void 0 : _a.defaultLanguageTag;
        manifestInfo.description = (_b = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.description) === null || _b === void 0 ? void 0 : _b.short;
        manifestInfo.displayName = (_c = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.name) === null || _c === void 0 ? void 0 : _c.short;
        manifestInfo.highResolutionIconUrl = (_d = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.icons) === null || _d === void 0 ? void 0 : _d.color;
        manifestInfo.hosts = (_e = extensionElement === null || extensionElement === void 0 ? void 0 : extensionElement.requirements) === null || _e === void 0 ? void 0 : _e.scopes;
        manifestInfo.iconUrl = (_f = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.icons) === null || _f === void 0 ? void 0 : _f.color;
        manifestInfo.officeAppType = (_j = (_h = (_g = extensionElement === null || extensionElement === void 0 ? void 0 : extensionElement.requirements) === null || _g === void 0 ? void 0 : _g.capabilities) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.name;
        manifestInfo.permissions = (_o = (_m = (_l = (_k = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.authorization) === null || _k === void 0 ? void 0 : _k.permissions) === null || _l === void 0 ? void 0 : _l.resourceSpecific) === null || _m === void 0 ? void 0 : _m[0]) === null || _o === void 0 ? void 0 : _o.name;
        manifestInfo.providerName = (_p = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.developer) === null || _p === void 0 ? void 0 : _p.name;
        manifestInfo.supportUrl = (_q = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.developer) === null || _q === void 0 ? void 0 : _q.websiteUrl;
        manifestInfo.version = teamsAppManifest === null || teamsAppManifest === void 0 ? void 0 : teamsAppManifest.version;
        return manifestInfo;
    }
    writeManifestData(manifestData) {
        return __awaiter(this, void 0, void 0, function* () {
            yield teams_manifest_1.ManifestUtil.writeToPath(this.manifestPath, manifestData);
        });
    }
}
exports.ManifestHandlerJson = ManifestHandlerJson;
//# sourceMappingURL=manifestHandlerJson.js.map